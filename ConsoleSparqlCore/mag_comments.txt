
Какой у меня план?
==================

Делаю альтернативное хранилище триплетов, оптимизирую как умею. Разворачиваю тест "фототека" и определяю скоростные возможности в данной задаче.
Важным моментом является то, что пытаюсь сформировать компоненты, которые нужны в проекте. Это - таблица имен, это собственно хранилище. 

Таблица имен. Здесь возможен такой подход: со стороны кодов - таблица имен есть прямо индексируемый массив. Со стороны строк - ТИ есть 
оптимизированное полуиндексом и шкалой построение. Можно сначала опираться на универсальный индекс. Таблица имен должна иметь средства загрузки,
возможно - загрузки порциями, а также средствами слабой динамической поддержки добавления новых строк. Может надо попробовать?
Хорошо бы сделать это в новом базисе, через универсальную последовательность, например. Или вообще - напрямую. 

Как это все должно выглядеть? Появляется индентификатор для вставления, надо его проверить, если он уже в таблице имен, то выдать его код, если нет,
то добавить, в словарь добавить пару, выдать код. Если словарь слишком разросся, надо его слить с третьей последовательностью. Третья 
последовательность может быть снабжена шкалой. А как добавлять порцию? Сначала, из набора идентификаторов убираем дубли. Потом сортируем множество 
идентификаторов по хеш-функции, потом сливаем две отсортированных последовательности. Потом снова строим шкалу... Может не надо так сложно, может 
достаточно единичных добавлений? 

Начинаю работать над "идеальной" RDF-машиной. Что это означает? Данные будут взяты из RDF, будет реализован ряд методов, которые нужны для 
выполнения тестов "Фототека". Это spO, sPO и Spo, причем последний - в части "объектного" объекта, т.е. ObjectProperty. Думаю, что очень хорошее
решение будет - каскадный индекс. Есть проблемы с его построением, но в принципе, подход достаточно прост: это IndexViewImmutable со специально 
организованной функцией CompareTo(). 

Буду пробовать. Сначала делаю упрощенный тип tp_OV (Object Variants), делаю запись tp_Triple, делаю таблицу, для простоты сохраняю первичный ключ
для таблицы. 

2 млн. триплетов условно загружалось 16 сек.
10 млн. триплетов загружались 83 сек. Использование ОЗУ достигало 5 Гб., база данных 590 мб


